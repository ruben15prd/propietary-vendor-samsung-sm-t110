%    Copyright (C) 1992, 1993, 1994, 1999 Aladdin Enterprises.  All rights reserved.
% 
%  This file is part of GNU ghostscript
%
%  GNU ghostscript is free software; you can redistribute it and/or modify it under
%  the terms of the version 2 of the GNU General Public License as published by the Free Software
%  Foundation.
%
%  GNU ghostscript is distributed in the hope that it will be useful, but WITHOUT
%  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
%  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
%
%  You should have received a copy of the GNU General Public License along with
%  ghostscript; see the file COPYING. If not, write to the Free Software Foundation,
%  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
%
% $Id: traceop.ps,v 1.5 2007/08/01 14:25:41 jemarch Exp $
% Trace individual operators or procedures.
% <opref> is <opname> or <opname> <dict>
%    (dict defaults to dict where op is currently defined, if writable;
%    otherwise uses userdict)
% <opref> traceop prints vmem usage before;
% <opref> <numargs|preproc> prints arguments or runs proc before;
% <opref> <numargs|preproc> <numresults|postproc>
%    also prints results or runs proc after.
% If traceflush is true, flush the output after each printout.
/traceflush true def

currentpacking true setpacking
.currentglobal true .setglobal

% Define the default "before" action
/tracebefore { vmstatus 3 traceprint pop pop pop } def

% Define the default "after" action
/traceafter { } def

/traceprint {
  dup type /integertype eq {
    1 sub -1 0 { ( ) print index ==only } for
  } {
    exec
  } ifelse
} bind def
/traceend {
  traceflush { flush } if
} bind def
/traceop {
  userdict begin
  dup type dup /nametype eq exch /dicttype eq or { { tracebefore } } if
  1 index type dup /nametype eq exch /dicttype eq or { { traceafter } } if
  /.tpost exch def /.tpre exch def
  dup type /dicttype ne {
    dup where not { userdict 1 index {} put userdict } if
  } if
  dup dup wcheck not {
    (Warning: substituting userdict for non-writable dictionary.) =
    pop userdict
  } if
  /.tddict exch def   /.tdict exch def   /.tname exch cvlit def
  .currentglobal [
  .tname /=only cvx ( ) /print cvx
    /.tpre load /traceprint cvx /traceend cvx
    .tdict .tname get /.tdef 1 index cvlit def
    dup xcheck {
      dup type dup /arraytype eq exch /packedarraytype eq or {
	/exec cvx
      } if
    } if
    /.tpost load /traceprint cvx () /= cvx /traceend cvx
  .tdef gcheck /.tpre load gcheck and /.tpost load gcheck and .setglobal
  ] cvx
  .tdef type /operatortype eq {
    .tname exch .makeoperator
  } if
  exch .setglobal
  .tddict exch .tname exch put
  end		% userdict
} bind def
/tracebind /bind load def	% in case someone wants to put it back
/bind { } def		% disable

.setglobal
setpacking
