%    Copyright (C) 2001, 2002 Aladdin Enterprises.  All rights reserved.
% 
%  This file is part of GNU ghostscript
%
%  GNU ghostscript is free software; you can redistribute it and/or modify it under
%  the terms of the version 2 of the GNU General Public License as published by the Free Software
%  Foundation.
%
%  GNU ghostscript is distributed in the hope that it will be useful, but WITHOUT
%  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
%  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
%
%  You should have received a copy of the GNU General Public License along with
%  ghostscript; see the file COPYING. If not, write to the Free Software Foundation,
%  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
%
% $Id: gs_icc.ps,v 1.7 2008/03/23 15:28:29 Arabidopsis Exp $
% ICCBased color space method dictionaries.
% This assumes gs_ciecs2.ps has already been processed.

.currentglobal true .setglobal

% gs_res.ps uses these entries in colorspacedict
% to populate the ColorSpaceFamily resource, so we need
% to add the supported spaces.
%
systemdict /colorspacedict get begin
/ICCBased [] def
end

NOPSICC { (%END PSICC) .skipeof } if
% Now set up ICC profile loading for PostScript %%BeginICCProfile sections.

systemdict begin
/.ProcessICCcomment { % file comment --  file comment
  dup
  (%%BeginICCProfile) anchorsearch {
    pop pop
    DEBUG { (.ProcessICCcomment found %%BeginICCProfile) print flush } if

    % load an ICC profile defined as comments (hex encoded).
    % Ends with %%End at the start of a line. Read the data into
    % a bytestring to allow seeking. This string can be used as a
    % seekable ReusableStreamDecode filter source by the ICC logic.
    %
    % Since .bigstring needs to know the size, we first read an array of
    % strings each 64000 max length.
    %
    % stack: --file-- (%%BeginICCProfile: ...) 
    1 index 0 (%%EndICCProfile) /SubFileDecode filter
    [ { counttomark 1 add index
        64000 string readhexstring
        not { exit } if
      } loop
    ] exch closefile
    0 1 index { length add } forall
    .bigstring
    exch 0 exch {
      % stack: --file-- (%%BeginICCProfile: ...) --bytestring-- cur_index --string--
      2 copy length add 	% calculate next string start point
      3 1 roll 3 index 3 1 roll putinterval
    } forall
    pop				% discard length of bytestring
    % make a seekable -file- out of the bytestring
    mark /AsyncRead true .dicttomark /ReusableStreamDecode filter
    % stack: --file-- (%%BeginICCProfile: ...) --icc_subfile-- 
    /DeviceCMYK setcolorspace
    << /DataSource 3 -1 roll
       /N 4		% Try CMYK first
    >> { .seticcspace } stopped {
      /DeviceRGB setcolorspace
      dup /N 3 put  { .seticcspace } stopped {
        /DeviceGray setcolorspace
        dup /N 1 put { .seticcspace } stopped {	% last choice
          QUIET not { (   *** Unable to load ICC profile from PostScript DSC comments ***) = flush } if
          pop
        } if
      } if
    } if
  } {
    pop % Not interested in this DSC comment
  } ifelse
} bind def

% Merge ProcessICCcomment with existing handler
/.ProcessICCcomment load /exec load
currentuserparams /ProcessDSCComment get 
dup null eq {pop {pop pop}} if /exec load
4 array astore cvx readonly
<< /ProcessDSCComment 3 -1 roll >> setuserparams

end	% systemdict
%END PSICC
.setglobal
