%    Copyright (C) 1989, 1995, 1997 Aladdin Enterprises.  All rights reserved.
% 
%  This file is part of GNU ghostscript
%
%  GNU ghostscript is free software; you can redistribute it and/or modify it under
%  the terms of the version 2 of the GNU General Public License as published by the Free Software
%  Foundation.
%
%  GNU ghostscript is distributed in the hope that it will be useful, but WITHOUT
%  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
%  FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
%
%  You should have received a copy of the GNU General Public License along with
%  ghostscript; see the file COPYING. If not, write to the Free Software Foundation,
%  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
%
% $Id: ppath.ps,v 1.5 2007/08/01 14:25:41 jemarch Exp $
% Redefine pathforall for tracing.
% Can't be used recursively.

/# {( )print} def

/-mat matrix def
/-imat matrix def
/-smat { //-mat currentmatrix pop //-imat setmatrix } bind def
/-rmat { //-mat setmatrix } bind def
/-pathforall /pathforall load def
/-p2 { ( ) print exch =only ( ) print =only } bind def
/-dp2 { 2 copy -p2 2 { exch 4096 mul dup cvi dup ( ) print =only sub dup 0 eq { pop } { (+) print =only } ifelse } repeat } bind def
/-tp2 { //-mat itransform -p2 } bind def
/-dict 5 dict def

/pathforall
 { -dict begin
   /-close exch def  /-curve exch def  /-line exch def  /-move exch def
   end -smat -mat ==only ( setmatrix) =
   {2 copy -tp2 ( moveto\t%)print
    2 copy -dp2 (\n)print
    flush -dict /-move get -rmat exec -smat}
   {2 copy -tp2 ( lineto\t%)print
    2 copy -dp2 (\n)print
    flush -dict /-line get -rmat exec -smat}
   {5 index 5 index -tp2 3 index 3 index -tp2 2 copy -tp2 ( curveto\t%)print
    5 index 5 index -dp2 3 index 3 index -dp2 2 copy -dp2 (\n)print
    flush -dict /-curve get -rmat exec -smat}
   {(closepath\n)print flush   -dict /-close get -rmat exec -smat}
   -pathforall -rmat
 }
def

% Just print the current path

/printpath {
  {pop pop} {pop pop} {pop pop pop pop pop pop} {} pathforall
} def
